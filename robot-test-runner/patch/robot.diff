--- a/site-packages/robot/parsing/mdreader.py	1970-01-01 08:00:00.000000000 +0800
+++ b/site-packages/robot/parsing/mdreader.py	2018-12-17 10:05:15.160000000 +0800
@@ -0,0 +1,61 @@
+from io import BytesIO
+from io import StringIO
+
+from .txtreader import TxtReader
+import mistune
+
+
+def MarkDownReader():
+
+    class MarkDownReader(object):
+
+        keywords = ["setting", "settings", "variable", "variables", "test case", "test cases", "keyword", "keywords"]
+        
+        def __init__(self):
+            self.robot_lines = []
+            self.robot_data = ''
+
+        def robotize(self, md_file):
+            #print('\n========== INPUT :\n', md_file,':')
+            # uncomment next two lines if want to see raw input in console
+            # print('\n', md_file.read())
+            # md_file.seek(0)
+			
+            parser = mistune.BlockLexer()
+            text = md_file.read().decode('UTF-8')
+            parser.parse(mistune.preprocessing(text))
+            for t in parser.tokens:
+                if t["type"] == "table":
+                    #print(t)
+                    if t["header"][0].lower() in self.keywords:
+                        robot_data = "| *" + "* | *".join(t["header"]) + "* |\n"
+                        for l in t["cells"]:
+                            robot_data += "| " + " | ".join(l) + " |\n"
+                        #print(robot_data)
+                        self.robot_data += robot_data
+
+            f = StringIO(text)
+            #print('\n========== TEMP :\n', f)
+            try:
+                include_line = False
+                for line in f.readlines():
+                    if not include_line:
+                        include_line = line.strip().lower() == "```robotframework"
+                    elif line.strip() == "```":
+                        include_line = False
+                    else:
+                        self.robot_lines.append(line)
+                self.robot_data += str(''.join(self.robot_lines))
+            finally:
+                f.close()
+                #print('\n========== OUTPUT :\n', self.robot_data)
+                return self.robot_data
+
+        def read(self, md_file, rawdata):
+            return self._read_text(self.robotize(md_file), rawdata)
+
+        def _read_text(self, data, rawdata):
+            txtfile = BytesIO(data.encode('UTF-8'))
+            return TxtReader().read(txtfile, rawdata)
+            
+    return MarkDownReader()
--- a/site-packages/robot/parsing/populators.py	2019-02-12 15:08:40.845113000 +0800
+++ b/site-packages/robot/parsing/populators.py	2018-11-19 14:17:44.257000000 +0800
@@ -28,11 +28,12 @@
 from .tsvreader import TsvReader
 from .txtreader import TxtReader
 from .restreader import RestReader
+from .mdreader import MarkDownReader
 
 
 READERS = {'html': HtmlReader, 'htm': HtmlReader, 'xhtml': HtmlReader,
            'tsv': TsvReader , 'rst': RestReader, 'rest': RestReader,
-           'txt': TxtReader, 'robot': TxtReader}
+           'txt': TxtReader, 'robot': TxtReader, 'md': MarkDownReader}
 
 # Hook for external tools for altering ${CURDIR} processing
 PROCESS_CURDIR = True
--- a/site-packages/robot/running/importer.py	2019-02-12 15:08:40.891912900 +0800
+++ b/site-packages/robot/running/importer.py	2019-01-11 11:11:58.151000000 +0800
@@ -59,10 +59,10 @@
     def _import_library(self, name, positional, named, lib):
         args = positional + ['%s=%s' % arg for arg in named]
         key = (name, positional, named)
-        if key in self._library_cache:
-            LOGGER.info("Found test library '%s' with arguments %s from cache"
-                        % (name, seq2str2(args)))
-            return self._library_cache[key]
+        # if key in self._library_cache:
+        #     LOGGER.info("Found test library '%s' with arguments %s from cache"
+        #                 % (name, seq2str2(args)))
+        #     return self._library_cache[key]
         lib.create_handlers()
         self._library_cache[key] = lib
         self._log_imported_library(name, args, lib)
